{"version":3,"sources":["../../../../../src/commands/eas-build/build/builders/iOSBuilder.ts"],"names":["iOSBuilder","constructor","ctx","prepareJobAsync","archiveUrl","buildProfile","workflow","Workflow","Generic","prepareGenericJobAsync","Managed","prepareManagedJobAsync","Error","ensureCredentialsAsync","secretEnvs","commandCtx","projectDir","shouldLoadCredentials","bundleIdentifier","exp","provider","iOSCredentialsProvider","projectName","accountName","nonInteractive","skipCredentialsCheck","initAsync","credentialsSource","credentials","getCredentialsAsync","setupAsync","scheme","resolveScheme","ensureProjectConfiguredAsync","configureProjectAsync","spinner","profileName","ProvisioningProfileUtils","readProfileName","provisioningProfile","appleTeam","readAppleTeam","IOSConfig","BundleIdenitifer","setBundleIdentifierForPbxproj","ProvisioningProfile","setProvisioningProfileForPbxproj","appleTeamId","teamId","gitUtils","ensureGitStatusIsCleanAsync","succeed","err","DirtyGitTreeError","log","newLine","reviewAndCommitChangesAsync","chalk","green","figures","tick","e","fail","prepareJobCommonAsync","buildCredentials","provisioningProfileBase64","distributionCertificate","dataBase64","certP12","password","certPassword","platform","Platform","iOS","projectUrl","secrets","projectRootDirectory","path","relative","process","cwd","type","BuildType","artifactPath","_buildProfile","packageJson","example","manifest","buildType","schemes","Scheme","getSchemesFromXcodeproj","length","sortedSchemes","bold","join","withoutTvOS","filter","i","includes","selectedScheme","name","message","choices","map","title","value"],"mappings":"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","sourcesContent":["import { IOSConfig } from '@expo/config';\nimport { BuildType, iOS, Job, Platform, sanitizeJob } from '@expo/eas-build-job';\nimport chalk from 'chalk';\nimport figures from 'figures';\nimport sortBy from 'lodash/sortBy';\nimport ora from 'ora';\nimport path from 'path';\n\nimport { readSecretEnvsAsync } from '../../../../credentials/credentialsJson/read';\nimport iOSCredentialsProvider, {\n  iOSCredentials,\n} from '../../../../credentials/provider/iOSCredentialsProvider';\nimport * as ProvisioningProfileUtils from '../../../../credentials/utils/provisioningProfile';\nimport {\n  CredentialsSource,\n  iOSGenericBuildProfile,\n  iOSManagedBuildProfile,\n  Workflow,\n} from '../../../../easJson';\nimport { gitRootDirectory } from '../../../../git';\nimport log from '../../../../log';\nimport prompts from '../../../../prompts';\nimport { Builder, BuilderContext } from '../../types';\nimport * as gitUtils from '../../utils/git';\nimport { ensureCredentialsAsync } from '../credentials';\nimport { getBundleIdentifier } from '../utils/ios';\n\ninterface CommonJobProperties {\n  platform: Platform.iOS;\n  projectUrl: string;\n  secrets: {\n    buildCredentials?: {\n      provisioningProfileBase64: string;\n      distributionCertificate: {\n        dataBase64: string;\n        password: string;\n      };\n    };\n    secretEnvs?: Record<string, string>;\n  };\n}\n\nclass iOSBuilder implements Builder<Platform.iOS> {\n  private credentials?: iOSCredentials;\n  private secretEnvs?: Record<string, string>;\n  private scheme?: string;\n\n  constructor(public readonly ctx: BuilderContext<Platform.iOS>) {}\n\n  public async prepareJobAsync(archiveUrl: string): Promise<Job> {\n    if (this.ctx.buildProfile.workflow === Workflow.Generic) {\n      return sanitizeJob(await this.prepareGenericJobAsync(archiveUrl, this.ctx.buildProfile));\n    } else if (this.ctx.buildProfile.workflow === Workflow.Managed) {\n      return sanitizeJob(await this.prepareManagedJobAsync(archiveUrl, this.ctx.buildProfile));\n    } else {\n      throw new Error(\"Unknown workflow. Shouldn't happen\");\n    }\n  }\n\n  public async ensureCredentialsAsync(): Promise<\n    CredentialsSource.LOCAL | CredentialsSource.REMOTE | undefined\n  > {\n    this.secretEnvs = await readSecretEnvsAsync(this.ctx.commandCtx.projectDir);\n\n    if (!this.shouldLoadCredentials()) {\n      return;\n    }\n    const bundleIdentifier = await getBundleIdentifier(\n      this.ctx.commandCtx.projectDir,\n      this.ctx.commandCtx.exp\n    );\n    const provider = new iOSCredentialsProvider(\n      this.ctx.commandCtx.projectDir,\n      {\n        projectName: this.ctx.commandCtx.projectName,\n        accountName: this.ctx.commandCtx.accountName,\n        bundleIdentifier,\n      },\n      {\n        nonInteractive: this.ctx.commandCtx.nonInteractive,\n        skipCredentialsCheck: this.ctx.commandCtx.skipCredentialsCheck,\n      }\n    );\n    await provider.initAsync();\n    const credentialsSource = await ensureCredentialsAsync(\n      provider,\n      this.ctx.buildProfile.workflow,\n      this.ctx.buildProfile.credentialsSource,\n      this.ctx.commandCtx.nonInteractive\n    );\n    this.credentials = await provider.getCredentialsAsync(credentialsSource);\n    return credentialsSource;\n  }\n\n  public async setupAsync(): Promise<void> {\n    if (this.ctx.buildProfile.workflow === Workflow.Generic) {\n      this.scheme = this.ctx.buildProfile.scheme ?? (await this.resolveScheme());\n    }\n  }\n\n  public async ensureProjectConfiguredAsync(): Promise<void> {\n    await this.configureProjectAsync();\n  }\n\n  public async configureProjectAsync(): Promise<void> {\n    if (this.ctx.buildProfile.workflow !== Workflow.Generic) {\n      return;\n    }\n\n    // TODO: add simulator flow\n    // assuming we're building for app store\n    if (!this.credentials) {\n      throw new Error('Call ensureCredentialsAsync first!');\n    }\n\n    const spinner = ora('Configuring the Xcode project');\n\n    const bundleIdentifier = await getBundleIdentifier(\n      this.ctx.commandCtx.projectDir,\n      this.ctx.commandCtx.exp\n    );\n\n    const profileName = ProvisioningProfileUtils.readProfileName(\n      this.credentials.provisioningProfile\n    );\n    const appleTeam = ProvisioningProfileUtils.readAppleTeam(this.credentials.provisioningProfile);\n\n    const { projectDir } = this.ctx.commandCtx;\n    IOSConfig.BundleIdenitifer.setBundleIdentifierForPbxproj(projectDir, bundleIdentifier, false);\n    IOSConfig.ProvisioningProfile.setProvisioningProfileForPbxproj(projectDir, {\n      profileName,\n      appleTeamId: appleTeam.teamId,\n    });\n\n    try {\n      await gitUtils.ensureGitStatusIsCleanAsync();\n      spinner.succeed();\n    } catch (err) {\n      if (err instanceof gitUtils.DirtyGitTreeError) {\n        spinner.succeed('We configured the Xcode project to build it on the Expo servers');\n        log.newLine();\n\n        try {\n          await gitUtils.reviewAndCommitChangesAsync('Configure Xcode project', {\n            nonInteractive: this.ctx.commandCtx.nonInteractive,\n          });\n\n          log(`${chalk.green(figures.tick)} Successfully committed the configuration changes.`);\n        } catch (e) {\n          throw new Error(\n            \"Aborting, run the command again once you're ready. Make sure to commit any changes you've made.\"\n          );\n        }\n      } else {\n        spinner.fail();\n        throw err;\n      }\n    }\n  }\n\n  private async prepareJobCommonAsync(archiveUrl: string): Promise<Partial<CommonJobProperties>> {\n    const buildCredentials = this.credentials\n      ? {\n          buildCredentials: {\n            provisioningProfileBase64: this.credentials.provisioningProfile,\n            distributionCertificate: {\n              dataBase64: this.credentials.distributionCertificate.certP12,\n              password: this.credentials.distributionCertificate.certPassword,\n            },\n          },\n        }\n      : {};\n\n    return {\n      platform: Platform.iOS,\n      projectUrl: archiveUrl,\n      secrets: {\n        ...(this.secretEnvs ? { secretEnvs: this.secretEnvs } : {}),\n        ...buildCredentials,\n      },\n    };\n  }\n\n  private async prepareGenericJobAsync(\n    archiveUrl: string,\n    buildProfile: iOSGenericBuildProfile\n  ): Promise<Partial<iOS.GenericJob>> {\n    const projectRootDirectory = path.relative(await gitRootDirectory(), process.cwd()) || '.';\n    return {\n      ...(await this.prepareJobCommonAsync(archiveUrl)),\n      type: BuildType.Generic,\n      scheme: this.scheme,\n      artifactPath: buildProfile.artifactPath,\n      projectRootDirectory,\n    };\n  }\n\n  private async prepareManagedJobAsync(\n    archiveUrl: string,\n    _buildProfile: iOSManagedBuildProfile\n  ): Promise<Partial<iOS.ManagedJob>> {\n    return {\n      ...(await this.prepareJobCommonAsync(archiveUrl)),\n      type: BuildType.Managed,\n      packageJson: { example: 'packageJson' },\n      manifest: { example: 'manifest' },\n    };\n  }\n\n  private shouldLoadCredentials(): boolean {\n    return (\n      (this.ctx.buildProfile.workflow === Workflow.Managed &&\n        this.ctx.buildProfile.buildType !== 'simulator') ||\n      this.ctx.buildProfile.workflow === Workflow.Generic\n    );\n  }\n\n  private async resolveScheme(): Promise<string> {\n    const schemes = IOSConfig.Scheme.getSchemesFromXcodeproj(this.ctx.commandCtx.projectDir);\n    if (schemes.length === 1) {\n      return schemes[0];\n    }\n\n    const sortedSchemes = sortBy(schemes);\n    log.newLine();\n    log(\n      `We've found multiple schemes in your Xcode project: ${log.chalk.bold(\n        sortedSchemes.join(', ')\n      )}`\n    );\n    log(\n      `You can specify the scheme you want to build at ${log.chalk.bold(\n        'builds.ios.PROFILE_NAME.scheme'\n      )} in eas.json.`\n    );\n    if (this.ctx.commandCtx.nonInteractive) {\n      const withoutTvOS = sortedSchemes.filter(i => !i.includes('tvOS'));\n      const scheme = withoutTvOS.length > 0 ? withoutTvOS[0] : sortedSchemes[0];\n      log(\n        `You've run Expo CLI in non-interactive mode, choosing the ${log.chalk.bold(\n          scheme\n        )} scheme.`\n      );\n      log.newLine();\n      return scheme;\n    } else {\n      const { selectedScheme } = await prompts({\n        type: 'select',\n        name: 'selectedScheme',\n        message: 'Which scheme would you like to build now?',\n        choices: sortedSchemes.map(scheme => ({ title: scheme, value: scheme })),\n      });\n      log.newLine();\n      return selectedScheme as string;\n    }\n  }\n}\n\nexport default iOSBuilder;\n"],"file":"iOSBuilder.js"}