{"version":3,"sources":["../../../../../src/commands/eas-build/build/builders/AndroidBuilder.ts"],"names":["AndroidBuilder","constructor","ctx","setupAsync","ensureCredentialsAsync","credentialsPrepared","secretEnvs","commandCtx","projectDir","shouldLoadCredentials","provider","AndroidCredentialsProvider","projectName","accountName","nonInteractive","initAsync","credentialsSource","buildProfile","workflow","credentials","getCredentialsAsync","isProjectConfiguredAsync","androidAppDir","path","join","buildGradlePath","easGradlePath","hasEasGradleFile","fs","pathExists","buildGradleContent","readFile","applyEasGradle","hasEasGradleApply","split","some","line","replace","ensureProjectConfiguredAsync","CommandError","configureProjectAsync","spinner","succeed","writeFile","gradleContent","intentToAdd","trim","gitUtils","ensureGitStatusIsCleanAsync","err","DirtyGitTreeError","log","newLine","reviewAndCommitChangesAsync","chalk","green","figures","tick","e","Error","fail","prepareJobAsync","archiveUrl","Workflow","Generic","prepareGenericJobAsync","Managed","prepareManagedJobAsync","prepareJobCommonAsync","buildCredentials","keystore","dataBase64","keystorePassword","keyAlias","keyPassword","platform","Platform","Android","projectUrl","secrets","projectRootDirectory","relative","process","cwd","type","BuildType","gradleCommand","artifactPath","_buildProfile","packageJson","example","manifest","withoutCredentials"],"mappings":"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","sourcesContent":["import { Android, BuildType, Job, Platform, sanitizeJob } from '@expo/eas-build-job';\nimport chalk from 'chalk';\nimport figures from 'figures';\nimport fs from 'fs-extra';\nimport ora from 'ora';\nimport path from 'path';\n\nimport CommandError from '../../../../CommandError';\nimport { readSecretEnvsAsync } from '../../../../credentials/credentialsJson/read';\nimport AndroidCredentialsProvider, {\n  AndroidCredentials,\n} from '../../../../credentials/provider/AndroidCredentialsProvider';\nimport {\n  AndroidGenericBuildProfile,\n  AndroidManagedBuildProfile,\n  CredentialsSource,\n  Workflow,\n} from '../../../../easJson';\nimport { gitAddAsync, gitRootDirectory } from '../../../../git';\nimport log from '../../../../log';\nimport { Builder, BuilderContext } from '../../types';\nimport * as gitUtils from '../../utils/git';\nimport { ensureCredentialsAsync } from '../credentials';\nimport gradleContent from '../templates/gradleContent';\n\ninterface CommonJobProperties {\n  platform: Platform.Android;\n  projectUrl: string;\n  secrets: {\n    buildCredentials?: {\n      keystore: Android.Keystore;\n    };\n    secretEnvs?: Record<string, string>;\n  };\n}\n\nclass AndroidBuilder implements Builder<Platform.Android> {\n  private credentials?: AndroidCredentials;\n  private secretEnvs?: Record<string, string>;\n  private credentialsPrepared: boolean = false;\n\n  constructor(public readonly ctx: BuilderContext<Platform.Android>) {}\n\n  public async setupAsync(): Promise<void> {}\n\n  public async ensureCredentialsAsync(): Promise<\n    CredentialsSource.LOCAL | CredentialsSource.REMOTE | undefined\n  > {\n    this.credentialsPrepared = true;\n    this.secretEnvs = await readSecretEnvsAsync(this.ctx.commandCtx.projectDir);\n\n    if (!this.shouldLoadCredentials()) {\n      return;\n    }\n    const provider = new AndroidCredentialsProvider(\n      this.ctx.commandCtx.projectDir,\n      {\n        projectName: this.ctx.commandCtx.projectName,\n        accountName: this.ctx.commandCtx.accountName,\n      },\n      { nonInteractive: this.ctx.commandCtx.nonInteractive }\n    );\n    await provider.initAsync();\n    const credentialsSource = await ensureCredentialsAsync(\n      provider,\n      this.ctx.buildProfile.workflow,\n      this.ctx.buildProfile.credentialsSource,\n      this.ctx.commandCtx.nonInteractive\n    );\n    this.credentials = await provider.getCredentialsAsync(credentialsSource);\n    return credentialsSource;\n  }\n\n  private async isProjectConfiguredAsync(): Promise<boolean> {\n    const androidAppDir = path.join(this.ctx.commandCtx.projectDir, 'android', 'app');\n    const buildGradlePath = path.join(androidAppDir, 'build.gradle');\n    const easGradlePath = path.join(androidAppDir, 'eas-build.gradle');\n\n    const hasEasGradleFile = await fs.pathExists(easGradlePath);\n\n    const buildGradleContent = await fs.readFile(path.join(buildGradlePath), 'utf-8');\n    const applyEasGradle = 'apply from: \"./eas-build.gradle\"';\n\n    const hasEasGradleApply = buildGradleContent\n      .split('\\n')\n      // Check for both single and double quotes\n      .some(line => line === applyEasGradle || line === applyEasGradle.replace(/\"/g, \"'\"));\n\n    return hasEasGradleApply && hasEasGradleFile;\n  }\n\n  public async ensureProjectConfiguredAsync(): Promise<void> {\n    if (!(await this.isProjectConfiguredAsync())) {\n      throw new CommandError(\n        'Project is not configured. Please run \"expo eas:build:init\" first to configure the project'\n      );\n    }\n  }\n\n  public async configureProjectAsync(): Promise<void> {\n    const spinner = ora('Making sure your Android project is set up properly');\n\n    if (await this.isProjectConfiguredAsync()) {\n      spinner.succeed('Android project is already configured');\n      return;\n    }\n\n    const { projectDir } = this.ctx.commandCtx;\n\n    const androidAppDir = path.join(projectDir, 'android', 'app');\n    const buildGradlePath = path.join(androidAppDir, 'build.gradle');\n    const easGradlePath = path.join(androidAppDir, 'eas-build.gradle');\n\n    await fs.writeFile(easGradlePath, gradleContent);\n    await gitAddAsync(easGradlePath, { intentToAdd: true });\n\n    const buildGradleContent = await fs.readFile(path.join(buildGradlePath), 'utf-8');\n    const applyEasGradle = 'apply from: \"./eas-build.gradle\"';\n\n    await fs.writeFile(buildGradlePath, `${buildGradleContent.trim()}\\n${applyEasGradle}\\n`);\n\n    try {\n      await gitUtils.ensureGitStatusIsCleanAsync();\n      spinner.succeed();\n    } catch (err) {\n      if (err instanceof gitUtils.DirtyGitTreeError) {\n        spinner.succeed('We configured your Android project to build it on the Expo servers');\n        log.newLine();\n\n        try {\n          await gitUtils.reviewAndCommitChangesAsync('Configure Android project', {\n            nonInteractive: this.ctx.commandCtx.nonInteractive,\n          });\n\n          log(`${chalk.green(figures.tick)} Successfully committed the configuration changes.`);\n        } catch (e) {\n          throw new Error(\n            \"Aborting, run the command again once you're ready. Make sure to commit any changes you've made.\"\n          );\n        }\n      } else {\n        spinner.fail();\n        throw err;\n      }\n    }\n  }\n\n  public async prepareJobAsync(archiveUrl: string): Promise<Job> {\n    if (!this.credentialsPrepared) {\n      throw new Error('ensureCredentialsAsync should be called before prepareJobAsync');\n    }\n    if (this.ctx.buildProfile.workflow === Workflow.Generic) {\n      return sanitizeJob(await this.prepareGenericJobAsync(archiveUrl, this.ctx.buildProfile));\n    } else if (this.ctx.buildProfile.workflow === Workflow.Managed) {\n      return sanitizeJob(await this.prepareManagedJobAsync(archiveUrl, this.ctx.buildProfile));\n    } else {\n      throw new Error(\"Unknown workflow. Shouldn't happen\");\n    }\n  }\n\n  private async prepareJobCommonAsync(archiveUrl: string): Promise<Partial<CommonJobProperties>> {\n    const buildCredentials = this.credentials\n      ? {\n          buildCredentials: {\n            keystore: {\n              dataBase64: this.credentials.keystore.keystore,\n              keystorePassword: this.credentials.keystore.keystorePassword,\n              keyAlias: this.credentials.keystore.keyAlias,\n              keyPassword: this.credentials.keystore.keyPassword,\n            },\n          },\n        }\n      : {};\n\n    return {\n      platform: Platform.Android,\n      projectUrl: archiveUrl,\n      secrets: {\n        ...(this.secretEnvs ? { secretEnvs: this.secretEnvs } : {}),\n        ...buildCredentials,\n      },\n    };\n  }\n\n  private async prepareGenericJobAsync(\n    archiveUrl: string,\n    buildProfile: AndroidGenericBuildProfile\n  ): Promise<Partial<Android.GenericJob>> {\n    const projectRootDirectory = path.relative(await gitRootDirectory(), process.cwd()) || '.';\n    return {\n      ...(await this.prepareJobCommonAsync(archiveUrl)),\n      type: BuildType.Generic,\n      gradleCommand: buildProfile.gradleCommand,\n      artifactPath: buildProfile.artifactPath,\n      projectRootDirectory,\n    };\n  }\n\n  private async prepareManagedJobAsync(\n    archiveUrl: string,\n    _buildProfile: AndroidManagedBuildProfile\n  ): Promise<Partial<Android.ManagedJob>> {\n    return {\n      ...(await this.prepareJobCommonAsync(archiveUrl)),\n      type: BuildType.Managed,\n      packageJson: { example: 'packageJson' },\n      manifest: { example: 'manifest' },\n    };\n  }\n\n  private shouldLoadCredentials(): boolean {\n    return (\n      this.ctx.buildProfile.workflow === Workflow.Managed ||\n      (this.ctx.buildProfile.workflow === Workflow.Generic &&\n        !this.ctx.buildProfile.withoutCredentials)\n    );\n  }\n}\n\nexport default AndroidBuilder;\n"],"file":"AndroidBuilder.js"}